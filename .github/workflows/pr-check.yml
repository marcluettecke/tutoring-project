name: Pull Request Check

on:
  pull_request:
    branches: [ main, master, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'

jobs:
  # Skip if draft PR
  check-draft:
    name: Check if PR is draft
    runs-on: ubuntu-latest
    outputs:
      is_draft: ${{ steps.check.outputs.is_draft }}
    steps:
      - name: Check if PR is draft
        id: check
        run: |
          if [[ "${{ github.event.pull_request.draft }}" == "true" ]]; then
            echo "is_draft=true" >> $GITHUB_OUTPUT
            echo "PR is draft, skipping checks"
          else
            echo "is_draft=false" >> $GITHUB_OUTPUT
            echo "PR is ready for review, running checks"
          fi

  # Quick validation for faster feedback
  quick-check:
    name: Quick Validation
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is_draft == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: TypeScript check
        run: npm run tsc:check

      - name: Quick lint check (changed files only)
        run: |
          # Get list of changed TypeScript and HTML files
          CHANGED_FILES=$(git diff --name-only --diff-filter=AM origin/${{ github.base_ref }}...HEAD | grep -E '\.(ts|html)$' | tr '\n' ' ')
          
          if [[ -n "$CHANGED_FILES" ]]; then
            echo "Checking changed files: $CHANGED_FILES"
            npx eslint $CHANGED_FILES
          else
            echo "No TypeScript or HTML files changed"
          fi

      - name: Check if tests exist for new components
        run: |
          # Check if new .ts files (except .spec.ts) have corresponding .spec.ts files
          NEW_TS_FILES=$(git diff --name-only --diff-filter=A origin/${{ github.base_ref }}...HEAD | grep '\.ts$' | grep -v '\.spec\.ts$' | grep -v '\.d\.ts$')
          
          for file in $NEW_TS_FILES; do
            if [[ $file == *"component.ts" || $file == *"service.ts" || $file == *"guard.ts" ]]; then
              spec_file="${file%.ts}.spec.ts"
              if [[ ! -f "$spec_file" ]]; then
                echo "‚ùå Missing test file for: $file"
                echo "Expected: $spec_file"
                exit 1
              else
                echo "‚úÖ Test file exists for: $file"
              fi
            fi
          done

  # Run the full CI pipeline for non-draft PRs
  full-check:
    name: Full CI Check
    needs: [check-draft, quick-check]
    if: needs.check-draft.outputs.is_draft == 'false'
    uses: ./.github/workflows/ci.yml

  # Code coverage check
  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is_draft == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Coverage report
        run: |
          COVERAGE_FILE="coverage/lcov.info"
          
          if [[ -f "$COVERAGE_FILE" ]]; then
            LINES_COVERED=$(grep -o 'LH:[0-9]*' $COVERAGE_FILE | cut -d: -f2 | awk '{sum += $1} END {print sum}')
            LINES_TOTAL=$(grep -o 'LF:[0-9]*' $COVERAGE_FILE | cut -d: -f2 | awk '{sum += $1} END {print sum}')
            
            if [[ $LINES_TOTAL -gt 0 ]]; then
              COVERAGE_PERCENT=$(( (LINES_COVERED * 100) / LINES_TOTAL ))
              echo "üìä Current coverage: ${COVERAGE_PERCENT}%"
              echo ""
              echo "‚ÑπÔ∏è Note: Coverage thresholds are currently disabled while we incrementally improve test coverage."
              echo "Focus is on testing critical components first, then expanding coverage over time."
            else
              echo "‚ö†Ô∏è No coverage data found"
            fi
          else
            echo "‚ö†Ô∏è Coverage file not found"
          fi

  # Dependency check
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is_draft == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check for package.json changes
        id: changes
        run: |
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "package*.json"; then
            echo "package_changed=true" >> $GITHUB_OUTPUT
            echo "Package files changed, running security audit"
          else
            echo "package_changed=false" >> $GITHUB_OUTPUT
            echo "No package changes detected"
          fi

      - name: Install dependencies
        if: steps.changes.outputs.package_changed == 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Run security audit
        if: steps.changes.outputs.package_changed == 'true'
        run: npm audit --audit-level=moderate

  # Comment on PR with results
  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [check-draft, quick-check, full-check, coverage-check]
    if: always() && needs.check-draft.outputs.is_draft == 'false'
    steps:
      - name: Create PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = require('@actions/github');
            
            // Get job results
            const quickCheck = '${{ needs.quick-check.result }}';
            const fullCheck = '${{ needs.full-check.result }}';
            const coverageCheck = '${{ needs.coverage-check.result }}';
            
            let emoji = '‚úÖ';
            let status = 'All checks passed!';
            
            if (quickCheck !== 'success' || fullCheck !== 'success' || coverageCheck !== 'success') {
              emoji = '‚ùå';
              status = 'Some checks failed!';
            }
            
            const body = `
            ## ${emoji} PR Check Results
            
            **Status:** ${status}
            
            | Check | Result |
            |-------|--------|
            | Quick Validation | ${quickCheck === 'success' ? '‚úÖ' : '‚ùå'} |
            | Full CI Check | ${fullCheck === 'success' ? '‚úÖ' : '‚ùå'} |
            | Coverage Check | ${coverageCheck === 'success' ? '‚úÖ' : '‚ùå'} |
            
            ${quickCheck !== 'success' || fullCheck !== 'success' || coverageCheck !== 'success' ? 
              '‚ö†Ô∏è Please fix the failing checks before merging.' : 
              'üéâ All checks passed! This PR is ready for review.'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });